// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: deposit_product.sql

package db

import (
	"context"
	"time"
)

const createDepositProduct = `-- name: CreateDepositProduct :exec
INSERT INTO deposit_products (deposit_id, product_id, saldo_fisico, saldo_virtual, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateDepositProductParams struct {
	DepositID    int64     `json:"deposit_id"`
	ProductID    int64     `json:"product_id"`
	SaldoFisico  int32     `json:"saldo_fisico"`
	SaldoVirtual int32     `json:"saldo_virtual"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateDepositProduct(ctx context.Context, arg CreateDepositProductParams) error {
	_, err := q.db.ExecContext(ctx, createDepositProduct,
		arg.DepositID,
		arg.ProductID,
		arg.SaldoFisico,
		arg.SaldoVirtual,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getDepositProducts = `-- name: GetDepositProducts :many
SELECT deposit_id,
        product_id,
        saldo_fisico,
        saldo_virtual,
        created_at,
        updated_at
FROM deposit_products
`

func (q *Queries) GetDepositProducts(ctx context.Context) ([]DepositProduct, error) {
	rows, err := q.db.QueryContext(ctx, getDepositProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DepositProduct
	for rows.Next() {
		var i DepositProduct
		if err := rows.Scan(
			&i.DepositID,
			&i.ProductID,
			&i.SaldoFisico,
			&i.SaldoVirtual,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepositProduct = `-- name: UpdateDepositProduct :exec
UPDATE deposit_products SET saldo_fisico = $3, 
  saldo_virtual = $4, 
  updated_at = $5
WHERE deposit_products.deposit_id = $1 AND deposit_products.product_id = $2
`

type UpdateDepositProductParams struct {
	DepositID    int64     `json:"deposit_id"`
	ProductID    int64     `json:"product_id"`
	SaldoFisico  int32     `json:"saldo_fisico"`
	SaldoVirtual int32     `json:"saldo_virtual"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateDepositProduct(ctx context.Context, arg UpdateDepositProductParams) error {
	_, err := q.db.ExecContext(ctx, updateDepositProduct,
		arg.DepositID,
		arg.ProductID,
		arg.SaldoFisico,
		arg.SaldoVirtual,
		arg.UpdatedAt,
	)
	return err
}
