// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: stock.sql

package db

import (
	"context"
	"time"
)

const createStock = `-- name: CreateStock :exec
INSERT INTO stocks (ID, product_id, saldoFisicoTotal, saldoVirtualTotal, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateStockParams struct {
	ID                int64     `json:"id"`
	ProductID         int64     `json:"product_id"`
	Saldofisicototal  int32     `json:"saldofisicototal"`
	Saldovirtualtotal int32     `json:"saldovirtualtotal"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) error {
	_, err := q.db.ExecContext(ctx, createStock,
		arg.ID,
		arg.ProductID,
		arg.Saldofisicototal,
		arg.Saldovirtualtotal,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getStocks = `-- name: GetStocks :many
SELECT id, product_id, saldofisicototal, saldovirtualtotal, created_at, updated_at
FROM stocks
`

func (q *Queries) GetStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Saldofisicototal,
			&i.Saldovirtualtotal,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStock = `-- name: UpdateStock :exec
UPDATE stocks SET saldoFisicoTotal = $2, 
  saldoVirtualTotal = $3, 
  updated_at = $4
WHERE stocks.id = $1
`

type UpdateStockParams struct {
	ID                int64     `json:"id"`
	Saldofisicototal  int32     `json:"saldofisicototal"`
	Saldovirtualtotal int32     `json:"saldovirtualtotal"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.ExecContext(ctx, updateStock,
		arg.ID,
		arg.Saldofisicototal,
		arg.Saldovirtualtotal,
		arg.UpdatedAt,
	)
	return err
}
