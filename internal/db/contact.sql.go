// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contact.sql

package db

import (
	"context"
	"time"
)

const createContact = `-- name: CreateContact :exec
INSERT INTO contacts ( ID, nome, codigo, situacao, numeroDocumento, telefone, celular, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateContactParams struct {
	ID              int64     `json:"id"`
	Nome            string    `json:"nome"`
	Codigo          string    `json:"codigo"`
	Situacao        string    `json:"situacao"`
	Numerodocumento string    `json:"numerodocumento"`
	Telefone        string    `json:"telefone"`
	Celular         string    `json:"celular"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) error {
	_, err := q.db.ExecContext(ctx, createContact,
		arg.ID,
		arg.Nome,
		arg.Codigo,
		arg.Situacao,
		arg.Numerodocumento,
		arg.Telefone,
		arg.Celular,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, nome, codigo, situacao, numerodocumento, telefone, celular, created_at, updated_at
FROM contacts
WHERE contacts.id = $1
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Codigo,
		&i.Situacao,
		&i.Numerodocumento,
		&i.Telefone,
		&i.Celular,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactByName = `-- name: GetContactByName :one
SELECT id, nome, codigo, situacao, numerodocumento, telefone, celular, created_at, updated_at
FROM contacts
WHERE contacts.nome = $1
`

func (q *Queries) GetContactByName(ctx context.Context, nome string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByName, nome)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Codigo,
		&i.Situacao,
		&i.Numerodocumento,
		&i.Telefone,
		&i.Celular,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT id, nome, codigo, situacao, numerodocumento, telefone, celular, created_at, updated_at
FROM contacts
`

func (q *Queries) GetContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Codigo,
			&i.Situacao,
			&i.Numerodocumento,
			&i.Telefone,
			&i.Celular,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
