// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: deposit.sql

package db

import (
	"context"
	"time"
)

const createDeposit = `-- name: CreateDeposit :exec
INSERT INTO deposits (ID, descricao, situacao, padrao, desconsiderarSaldo, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateDepositParams struct {
	ID                 int64     `json:"id"`
	Descricao          string    `json:"descricao"`
	Situacao           int32     `json:"situacao"`
	Padrao             bool      `json:"padrao"`
	Desconsiderarsaldo bool      `json:"desconsiderarsaldo"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) error {
	_, err := q.db.ExecContext(ctx, createDeposit,
		arg.ID,
		arg.Descricao,
		arg.Situacao,
		arg.Padrao,
		arg.Desconsiderarsaldo,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getDeposits = `-- name: GetDeposits :many
SELECT id, descricao, situacao, padrao, desconsiderarsaldo, created_at, updated_at
FROM deposits
`

func (q *Queries) GetDeposits(ctx context.Context) ([]Deposit, error) {
	rows, err := q.db.QueryContext(ctx, getDeposits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.Situacao,
			&i.Padrao,
			&i.Desconsiderarsaldo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
