// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sales_channel.sql

package db

import (
	"context"
	"time"
)

const createSalesChannel = `-- name: CreateSalesChannel :exec
INSERT INTO sales_channel (ID, descricao, tipo, situacao, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSalesChannelParams struct {
	ID        int32     `json:"id"`
	Descricao string    `json:"descricao"`
	Tipo      string    `json:"tipo"`
	Situacao  int32     `json:"situacao"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateSalesChannel(ctx context.Context, arg CreateSalesChannelParams) error {
	_, err := q.db.ExecContext(ctx, createSalesChannel,
		arg.ID,
		arg.Descricao,
		arg.Tipo,
		arg.Situacao,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSalesChannel = `-- name: GetSalesChannel :many
SELECT id, descricao, tipo, situacao, created_at, updated_at
FROM sales_channel
`

func (q *Queries) GetSalesChannel(ctx context.Context) ([]SalesChannel, error) {
	rows, err := q.db.QueryContext(ctx, getSalesChannel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesChannel
	for rows.Next() {
		var i SalesChannel
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.Tipo,
			&i.Situacao,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
