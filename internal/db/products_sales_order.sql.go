// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products_sales_order.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProductSalesOrder = `-- name: CreateProductSalesOrder :exec
INSERT INTO products_sales_orders (sales_order_id, product_id, quantidade, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateProductSalesOrderParams struct {
	SalesOrderID int64     `json:"sales_order_id"`
	ProductID    int64     `json:"product_id"`
	Quantidade   int32     `json:"quantidade"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateProductSalesOrder(ctx context.Context, arg CreateProductSalesOrderParams) error {
	_, err := q.db.ExecContext(ctx, createProductSalesOrder,
		arg.SalesOrderID,
		arg.ProductID,
		arg.Quantidade,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getProductSalesOrderBySupplierID = `-- name: GetProductSalesOrderBySupplierID :many
SELECT pso.sales_order_id, 
        pso.product_id, 
        pso.quantidade, 
        pso.created_at, 
        pso.updated_at,
        so.id,
        so.numero,
        so.numeroloja,
        so.data,
        so.datasaida,
        so.dataprevista,
        so.totalprodutos,
        so.totaldescontos,
        so.situation_id,
        so.store_id,
        sp.supplier_id,
        p.nome,
        p.codigo,
        p.preco
FROM products_sales_orders pso
LEFT JOIN products p ON p.id = pso.product_id
LEFT JOIN sales_orders so ON so.id = pso.sales_order_id
LEFT JOIN supplier_products sp ON pso.product_id = sp.product_id
WHERE sp.supplier_id = $1
`

type GetProductSalesOrderBySupplierIDRow struct {
	SalesOrderID   int64           `json:"sales_order_id"`
	ProductID      int64           `json:"product_id"`
	Quantidade     int32           `json:"quantidade"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	ID             sql.NullInt64   `json:"id"`
	Numero         sql.NullInt32   `json:"numero"`
	Numeroloja     sql.NullString  `json:"numeroloja"`
	Data           sql.NullTime    `json:"data"`
	Datasaida      sql.NullTime    `json:"datasaida"`
	Dataprevista   sql.NullTime    `json:"dataprevista"`
	Totalprodutos  sql.NullFloat64 `json:"totalprodutos"`
	Totaldescontos sql.NullFloat64 `json:"totaldescontos"`
	SituationID    sql.NullInt64   `json:"situation_id"`
	StoreID        sql.NullInt64   `json:"store_id"`
	SupplierID     sql.NullInt64   `json:"supplier_id"`
	Nome           sql.NullString  `json:"nome"`
	Codigo         sql.NullString  `json:"codigo"`
	Preco          sql.NullFloat64 `json:"preco"`
}

func (q *Queries) GetProductSalesOrderBySupplierID(ctx context.Context, supplierID int64) ([]GetProductSalesOrderBySupplierIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductSalesOrderBySupplierID, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductSalesOrderBySupplierIDRow
	for rows.Next() {
		var i GetProductSalesOrderBySupplierIDRow
		if err := rows.Scan(
			&i.SalesOrderID,
			&i.ProductID,
			&i.Quantidade,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.StoreID,
			&i.SupplierID,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSalesOrders = `-- name: GetProductSalesOrders :many
SELECT pso.sales_order_id, 
        pso.product_id, 
        pso.quantidade, 
        pso.created_at, 
        pso.updated_at,
        so.id,
        so.numero,
        so.numeroloja,
        so.data,
        so.datasaida,
        so.dataprevista,
        so.totalprodutos,
        so.totaldescontos,
        so.situation_id,
        so.store_id,
        sp.supplier_id,
        p.nome,
        p.codigo,
        p.preco
FROM products_sales_orders pso
LEFT JOIN products p ON p.id = pso.product_id
LEFT JOIN sales_orders so ON so.id = pso.sales_order_id
LEFT JOIN supplier_products sp ON pso.product_id = sp.product_id
ORDER BY so.datasaida ASC, pso.sales_order_id
`

type GetProductSalesOrdersRow struct {
	SalesOrderID   int64           `json:"sales_order_id"`
	ProductID      int64           `json:"product_id"`
	Quantidade     int32           `json:"quantidade"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	ID             sql.NullInt64   `json:"id"`
	Numero         sql.NullInt32   `json:"numero"`
	Numeroloja     sql.NullString  `json:"numeroloja"`
	Data           sql.NullTime    `json:"data"`
	Datasaida      sql.NullTime    `json:"datasaida"`
	Dataprevista   sql.NullTime    `json:"dataprevista"`
	Totalprodutos  sql.NullFloat64 `json:"totalprodutos"`
	Totaldescontos sql.NullFloat64 `json:"totaldescontos"`
	SituationID    sql.NullInt64   `json:"situation_id"`
	StoreID        sql.NullInt64   `json:"store_id"`
	SupplierID     sql.NullInt64   `json:"supplier_id"`
	Nome           sql.NullString  `json:"nome"`
	Codigo         sql.NullString  `json:"codigo"`
	Preco          sql.NullFloat64 `json:"preco"`
}

func (q *Queries) GetProductSalesOrders(ctx context.Context) ([]GetProductSalesOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductSalesOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductSalesOrdersRow
	for rows.Next() {
		var i GetProductSalesOrdersRow
		if err := rows.Scan(
			&i.SalesOrderID,
			&i.ProductID,
			&i.Quantidade,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.StoreID,
			&i.SupplierID,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
