// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sales_order.sql

package db

import (
	"context"
	"time"
)

const createSalesOrder = `-- name: CreateSalesOrder :exec
INSERT INTO sales_orders (id, numero, numeroLoja, data, dataSaida, dataPrevista, totalProdutos, totalDescontos, situation_id, store_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
`

type CreateSalesOrderParams struct {
	ID             int64     `json:"id"`
	Numero         int32     `json:"numero"`
	Numeroloja     string    `json:"numeroloja"`
	Data           time.Time `json:"data"`
	Datasaida      time.Time `json:"datasaida"`
	Dataprevista   time.Time `json:"dataprevista"`
	Totalprodutos  float64   `json:"totalprodutos"`
	Totaldescontos float64   `json:"totaldescontos"`
	SituationID    int64     `json:"situation_id"`
	StoreID        int64     `json:"store_id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateSalesOrder(ctx context.Context, arg CreateSalesOrderParams) error {
	_, err := q.db.ExecContext(ctx, createSalesOrder,
		arg.ID,
		arg.Numero,
		arg.Numeroloja,
		arg.Data,
		arg.Datasaida,
		arg.Dataprevista,
		arg.Totalprodutos,
		arg.Totaldescontos,
		arg.SituationID,
		arg.StoreID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSalesOrder = `-- name: GetSalesOrder :one
SELECT id,
        numero,
        numeroLoja,
        data,
        dataSaida,
        dataPrevista,
        totalProdutos,
        totalDescontos,
        situation_id,
        store_id,
        created_at,
        updated_at
FROM sales_orders
WHERE sales_orders.id = $1
`

func (q *Queries) GetSalesOrder(ctx context.Context, id int64) (SalesOrder, error) {
	row := q.db.QueryRowContext(ctx, getSalesOrder, id)
	var i SalesOrder
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Numeroloja,
		&i.Data,
		&i.Datasaida,
		&i.Dataprevista,
		&i.Totalprodutos,
		&i.Totaldescontos,
		&i.SituationID,
		&i.StoreID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrderByNumber = `-- name: GetSalesOrderByNumber :one
SELECT id,
        numero,
        numeroLoja,
        data,
        dataSaida,
        dataPrevista,
        totalProdutos,
        totalDescontos,
        situation_id,
        store_id,
        created_at,
        updated_at
FROM sales_orders
WHERE sales_orders.numero = $1
`

func (q *Queries) GetSalesOrderByNumber(ctx context.Context, numero int32) (SalesOrder, error) {
	row := q.db.QueryRowContext(ctx, getSalesOrderByNumber, numero)
	var i SalesOrder
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Numeroloja,
		&i.Data,
		&i.Datasaida,
		&i.Dataprevista,
		&i.Totalprodutos,
		&i.Totaldescontos,
		&i.SituationID,
		&i.StoreID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrders = `-- name: GetSalesOrders :many
SELECT id,
        numero,
        numeroLoja,
        data,
        dataSaida,
        dataPrevista,
        totalProdutos,
        totalDescontos,
        situation_id,
        store_id,
        created_at,
        updated_at
FROM sales_orders
`

func (q *Queries) GetSalesOrders(ctx context.Context) ([]SalesOrder, error) {
	rows, err := q.db.QueryContext(ctx, getSalesOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesOrder
	for rows.Next() {
		var i SalesOrder
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.StoreID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
