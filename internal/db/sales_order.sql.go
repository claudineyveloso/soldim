// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sales_order.sql

package db

import (
	"context"
	"time"
)

const createSalesOrder = `-- name: CreateSalesOrder :exec
INSERT INTO sales_orders (id, numero, numeroLoja, data, dataSaida, dataPrevista, totalProdutos, totalDescontos, situation_id, store_id, contact_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
`

type CreateSalesOrderParams struct {
	ID             int64     `json:"id"`
	Numero         int32     `json:"numero"`
	Numeroloja     string    `json:"numeroloja"`
	Data           time.Time `json:"data"`
	Datasaida      time.Time `json:"datasaida"`
	Dataprevista   time.Time `json:"dataprevista"`
	Totalprodutos  float64   `json:"totalprodutos"`
	Totaldescontos float64   `json:"totaldescontos"`
	SituationID    int64     `json:"situation_id"`
	StoreID        int64     `json:"store_id"`
	ContactID      int64     `json:"contact_id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateSalesOrder(ctx context.Context, arg CreateSalesOrderParams) error {
	_, err := q.db.ExecContext(ctx, createSalesOrder,
		arg.ID,
		arg.Numero,
		arg.Numeroloja,
		arg.Data,
		arg.Datasaida,
		arg.Dataprevista,
		arg.Totalprodutos,
		arg.Totaldescontos,
		arg.SituationID,
		arg.StoreID,
		arg.ContactID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSalesOrder = `-- name: GetSalesOrder :one
SELECT 
  so.id,
  so.numero,
  so.numeroLoja,
  so.data,
  so.dataSaida,
  so.dataPrevista,
  so.totalProdutos,
  so.totalDescontos,
  so.situation_id,
  s.descricao AS situation_description,  -- Renomeia a coluna da situação
  so.store_id,
  st.descricao AS store_description,  -- Renomeia a coluna da loja
  so.contact_id,
  c.nome AS contact_name,  -- Nome do contato
  c.numeroDocumento AS contact_document,  -- Documento do contato
  so.created_at,
  so.updated_at
FROM 
    sales_orders so
JOIN 
    contacts c ON so.contact_id = c.id
JOIN 
    stores st ON so.store_id = st.id
JOIN 
    situations s ON so.situation_id = s.id
WHERE so.id = $1
`

type GetSalesOrderRow struct {
	ID                   int64     `json:"id"`
	Numero               int32     `json:"numero"`
	Numeroloja           string    `json:"numeroloja"`
	Data                 time.Time `json:"data"`
	Datasaida            time.Time `json:"datasaida"`
	Dataprevista         time.Time `json:"dataprevista"`
	Totalprodutos        float64   `json:"totalprodutos"`
	Totaldescontos       float64   `json:"totaldescontos"`
	SituationID          int64     `json:"situation_id"`
	SituationDescription string    `json:"situation_description"`
	StoreID              int64     `json:"store_id"`
	StoreDescription     string    `json:"store_description"`
	ContactID            int64     `json:"contact_id"`
	ContactName          string    `json:"contact_name"`
	ContactDocument      string    `json:"contact_document"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) GetSalesOrder(ctx context.Context, id int64) (GetSalesOrderRow, error) {
	row := q.db.QueryRowContext(ctx, getSalesOrder, id)
	var i GetSalesOrderRow
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Numeroloja,
		&i.Data,
		&i.Datasaida,
		&i.Dataprevista,
		&i.Totalprodutos,
		&i.Totaldescontos,
		&i.SituationID,
		&i.SituationDescription,
		&i.StoreID,
		&i.StoreDescription,
		&i.ContactID,
		&i.ContactName,
		&i.ContactDocument,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrderByNumber = `-- name: GetSalesOrderByNumber :one
SELECT 
  so.id,
  so.numero,
  so.numeroLoja,
  so.data,
  so.dataSaida,
  so.dataPrevista,
  so.totalProdutos,
  so.totalDescontos,
  so.situation_id,
  s.descricao AS situation_description,  -- Renomeia a coluna da situação
  so.store_id,
  st.descricao AS store_description,  -- Renomeia a coluna da loja
  so.contact_id,
  c.nome AS contact_name,  -- Nome do contato
  c.numeroDocumento AS contact_document,  -- Documento do contato
  so.created_at,
  so.updated_at
FROM 
    sales_orders so
JOIN 
    contacts c ON so.contact_id = c.id
JOIN 
    stores st ON so.store_id = st.id
JOIN 
    situations s ON so.situation_id = s.id
WHERE so.numero = $1
`

type GetSalesOrderByNumberRow struct {
	ID                   int64     `json:"id"`
	Numero               int32     `json:"numero"`
	Numeroloja           string    `json:"numeroloja"`
	Data                 time.Time `json:"data"`
	Datasaida            time.Time `json:"datasaida"`
	Dataprevista         time.Time `json:"dataprevista"`
	Totalprodutos        float64   `json:"totalprodutos"`
	Totaldescontos       float64   `json:"totaldescontos"`
	SituationID          int64     `json:"situation_id"`
	SituationDescription string    `json:"situation_description"`
	StoreID              int64     `json:"store_id"`
	StoreDescription     string    `json:"store_description"`
	ContactID            int64     `json:"contact_id"`
	ContactName          string    `json:"contact_name"`
	ContactDocument      string    `json:"contact_document"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) GetSalesOrderByNumber(ctx context.Context, numero int32) (GetSalesOrderByNumberRow, error) {
	row := q.db.QueryRowContext(ctx, getSalesOrderByNumber, numero)
	var i GetSalesOrderByNumberRow
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Numeroloja,
		&i.Data,
		&i.Datasaida,
		&i.Dataprevista,
		&i.Totalprodutos,
		&i.Totaldescontos,
		&i.SituationID,
		&i.SituationDescription,
		&i.StoreID,
		&i.StoreDescription,
		&i.ContactID,
		&i.ContactName,
		&i.ContactDocument,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrderTotalByDay = `-- name: GetSalesOrderTotalByDay :many
SELECT so.id, 
       so.numero, 
       so.numeroloja, 
       so.data, 
       so.datasaida, 
       so.dataprevista,
       so.totalprodutos,
       so.totaldescontos,
       so.situation_id,
       so.store_id,
       (SELECT SUM(totalprodutos) 
        FROM sales_orders 
        WHERE sales_orders.datasaida >= $1) AS total_produtos_soma,
        so.contact_id
FROM sales_orders so
WHERE so.datasaida = $1
`

type GetSalesOrderTotalByDayRow struct {
	ID                int64     `json:"id"`
	Numero            int32     `json:"numero"`
	Numeroloja        string    `json:"numeroloja"`
	Data              time.Time `json:"data"`
	Datasaida         time.Time `json:"datasaida"`
	Dataprevista      time.Time `json:"dataprevista"`
	Totalprodutos     float64   `json:"totalprodutos"`
	Totaldescontos    float64   `json:"totaldescontos"`
	SituationID       int64     `json:"situation_id"`
	StoreID           int64     `json:"store_id"`
	TotalProdutosSoma int64     `json:"total_produtos_soma"`
	ContactID         int64     `json:"contact_id"`
}

func (q *Queries) GetSalesOrderTotalByDay(ctx context.Context, datasaida time.Time) ([]GetSalesOrderTotalByDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getSalesOrderTotalByDay, datasaida)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesOrderTotalByDayRow
	for rows.Next() {
		var i GetSalesOrderTotalByDayRow
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.StoreID,
			&i.TotalProdutosSoma,
			&i.ContactID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesOrders = `-- name: GetSalesOrders :many
SELECT 
  so.id,
  so.numero,
  so.numeroLoja,
  so.data,
  so.dataSaida,
  so.dataPrevista,
  so.totalProdutos,
  so.totalDescontos,
  so.situation_id,
  s.descricao AS situation_description,  -- Renomeia a coluna da situação
  so.store_id,
  st.descricao AS store_description,  -- Renomeia a coluna da loja
  so.contact_id,
  c.nome AS contact_name,  -- Nome do contato
  c.numeroDocumento AS contact_document,  -- Documento do contato
  so.created_at,
  so.updated_at
FROM 
    sales_orders so
JOIN 
    contacts c ON so.contact_id = c.id
JOIN 
    stores st ON so.store_id = st.id
JOIN 
    situations s ON so.situation_id = s.id
ORDER BY so.dataSaida DESC
`

type GetSalesOrdersRow struct {
	ID                   int64     `json:"id"`
	Numero               int32     `json:"numero"`
	Numeroloja           string    `json:"numeroloja"`
	Data                 time.Time `json:"data"`
	Datasaida            time.Time `json:"datasaida"`
	Dataprevista         time.Time `json:"dataprevista"`
	Totalprodutos        float64   `json:"totalprodutos"`
	Totaldescontos       float64   `json:"totaldescontos"`
	SituationID          int64     `json:"situation_id"`
	SituationDescription string    `json:"situation_description"`
	StoreID              int64     `json:"store_id"`
	StoreDescription     string    `json:"store_description"`
	ContactID            int64     `json:"contact_id"`
	ContactName          string    `json:"contact_name"`
	ContactDocument      string    `json:"contact_document"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) GetSalesOrders(ctx context.Context) ([]GetSalesOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSalesOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesOrdersRow
	for rows.Next() {
		var i GetSalesOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.SituationDescription,
			&i.StoreID,
			&i.StoreDescription,
			&i.ContactID,
			&i.ContactName,
			&i.ContactDocument,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalSalesOrderLastThirtyDays = `-- name: GetTotalSalesOrderLastThirtyDays :many
SELECT
    DATE_TRUNC('day', datasaida) AS dia,
    SUM(totalprodutos) AS total_produtos_soma,
    COUNT(*) AS total_vendas
FROM 
    sales_orders
WHERE 
    datasaida >= NOW() - INTERVAL '30 days' AND datasaida < NOW() 
GROUP BY 
    DATE_TRUNC('day', datasaida)
ORDER BY 
    dia
`

type GetTotalSalesOrderLastThirtyDaysRow struct {
	Dia               int64 `json:"dia"`
	TotalProdutosSoma int64 `json:"total_produtos_soma"`
	TotalVendas       int64 `json:"total_vendas"`
}

func (q *Queries) GetTotalSalesOrderLastThirtyDays(ctx context.Context) ([]GetTotalSalesOrderLastThirtyDaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getTotalSalesOrderLastThirtyDays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalSalesOrderLastThirtyDaysRow
	for rows.Next() {
		var i GetTotalSalesOrderLastThirtyDaysRow
		if err := rows.Scan(&i.Dia, &i.TotalProdutosSoma, &i.TotalVendas); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalSalesOrderTotalByWeek = `-- name: GetTotalSalesOrderTotalByWeek :many
SELECT so.id, 
        so.numero, 
        so.numeroloja, 
        so.data, 
        so.datasaida, 
        so.dataprevista,
        so.totalprodutos,
        so.totaldescontos,
        so.situation_id,
        so.store_id,
       (SELECT SUM(totalprodutos) 
        FROM sales_orders 
        WHERE DATE_TRUNC('week', datasaida) = DATE_TRUNC('week', $1::date)) AS total_produtos_soma,
        so.contact_id
FROM sales_orders so
WHERE DATE_TRUNC('week', so.datasaida) = DATE_TRUNC('week', $1::date)
ORDER BY so.datasaida
`

type GetTotalSalesOrderTotalByWeekRow struct {
	ID                int64     `json:"id"`
	Numero            int32     `json:"numero"`
	Numeroloja        string    `json:"numeroloja"`
	Data              time.Time `json:"data"`
	Datasaida         time.Time `json:"datasaida"`
	Dataprevista      time.Time `json:"dataprevista"`
	Totalprodutos     float64   `json:"totalprodutos"`
	Totaldescontos    float64   `json:"totaldescontos"`
	SituationID       int64     `json:"situation_id"`
	StoreID           int64     `json:"store_id"`
	TotalProdutosSoma int64     `json:"total_produtos_soma"`
	ContactID         int64     `json:"contact_id"`
}

func (q *Queries) GetTotalSalesOrderTotalByWeek(ctx context.Context, dollar_1 time.Time) ([]GetTotalSalesOrderTotalByWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getTotalSalesOrderTotalByWeek, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalSalesOrderTotalByWeekRow
	for rows.Next() {
		var i GetTotalSalesOrderTotalByWeekRow
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
			&i.SituationID,
			&i.StoreID,
			&i.TotalProdutosSoma,
			&i.ContactID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
