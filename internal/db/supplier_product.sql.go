// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: supplier_product.sql

package db

import (
	"context"
	"time"
)

const createSupplierProduct = `-- name: CreateSupplierProduct :exec
INSERT INTO supplier_products (id, descricao, preco_custo, preco_compra, padrao, supplier_id, product_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateSupplierProductParams struct {
	ID          int64     `json:"id"`
	Descricao   string    `json:"descricao"`
	PrecoCusto  float64   `json:"preco_custo"`
	PrecoCompra float64   `json:"preco_compra"`
	Padrao      bool      `json:"padrao"`
	SupplierID  int64     `json:"supplier_id"`
	ProductID   int64     `json:"product_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateSupplierProduct(ctx context.Context, arg CreateSupplierProductParams) error {
	_, err := q.db.ExecContext(ctx, createSupplierProduct,
		arg.ID,
		arg.Descricao,
		arg.PrecoCusto,
		arg.PrecoCompra,
		arg.Padrao,
		arg.SupplierID,
		arg.ProductID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSupplierProduct = `-- name: GetSupplierProduct :many
SELECT  id,
          descricao,
          preco_custo,
          preco_compra,
          padrao,
          supplier_id,
          product_id,
          created_at,
          updated_at
FROM supplier_products
`

type GetSupplierProductRow struct {
	ID          int64     `json:"id"`
	Descricao   string    `json:"descricao"`
	PrecoCusto  float64   `json:"preco_custo"`
	PrecoCompra float64   `json:"preco_compra"`
	Padrao      bool      `json:"padrao"`
	SupplierID  int64     `json:"supplier_id"`
	ProductID   int64     `json:"product_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) GetSupplierProduct(ctx context.Context) ([]GetSupplierProductRow, error) {
	rows, err := q.db.QueryContext(ctx, getSupplierProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSupplierProductRow
	for rows.Next() {
		var i GetSupplierProductRow
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.PrecoCusto,
			&i.PrecoCompra,
			&i.Padrao,
			&i.SupplierID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplierProduct = `-- name: UpdateSupplierProduct :exec
UPDATE supplier_products SET descricao = $2,
  preco_custo = $3,
  preco_compra = $4,
  padrao = $5,
  supplier_id = $6,
  product_id = $7,
  updated_at = $8
WHERE supplier_products.id = $1
`

type UpdateSupplierProductParams struct {
	ID          int64     `json:"id"`
	Descricao   string    `json:"descricao"`
	PrecoCusto  float64   `json:"preco_custo"`
	PrecoCompra float64   `json:"preco_compra"`
	Padrao      bool      `json:"padrao"`
	SupplierID  int64     `json:"supplier_id"`
	ProductID   int64     `json:"product_id"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSupplierProduct(ctx context.Context, arg UpdateSupplierProductParams) error {
	_, err := q.db.ExecContext(ctx, updateSupplierProduct,
		arg.ID,
		arg.Descricao,
		arg.PrecoCusto,
		arg.PrecoCompra,
		arg.Padrao,
		arg.SupplierID,
		arg.ProductID,
		arg.UpdatedAt,
	)
	return err
}
