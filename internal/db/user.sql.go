// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users ( ID, email, password, is_active, user_type, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	IsActive  bool      `json:"is_active"`
	UserType  string    `json:"user_type"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.IsActive,
		arg.UserType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const disableUser = `-- name: DisableUser :exec
UPDATE users SET is_active = $2, updated_at = $3 WHERE users.id = $1
`

type DisableUserParams struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) DisableUser(ctx context.Context, arg DisableUserParams) error {
	_, err := q.db.ExecContext(ctx, disableUser, arg.ID, arg.IsActive, arg.UpdatedAt)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, is_active, user_type, created_at, updated_at
FROM users
WHERE users.id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, is_active, user_type, created_at, updated_at
FROM users
WHERE users.email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, password, is_active, user_type, created_at, updated_at
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.IsActive,
			&i.UserType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT id, email, password, is_active, user_type, created_at, updated_at
FROM users
WHERE users.email = $1 AND users.password = $2
`

type LoginUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $2, updated_at = $3 WHERE users.id = $1
`

type UpdatePasswordParams struct {
	ID        uuid.UUID `json:"id"`
	Password  string    `json:"password"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.Password, arg.UpdatedAt)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = $2, is_active = $3, user_type = $4, updated_at = $5 WHERE users.id = $1
`

type UpdateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	IsActive  bool      `json:"is_active"`
	UserType  string    `json:"user_type"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.IsActive,
		arg.UserType,
		arg.UpdatedAt,
	)
	return err
}
