// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: draft.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDraft = `-- name: CreateDraft :exec
INSERT INTO drafts ( ID, image_url, description, source, price, promotion, link, search_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateDraftParams struct {
	ID          uuid.UUID `json:"id"`
	ImageUrl    string    `json:"image_url"`
	Description string    `json:"description"`
	Source      string    `json:"source"`
	Price       float64   `json:"price"`
	Promotion   bool      `json:"promotion"`
	Link        string    `json:"link"`
	SearchID    uuid.UUID `json:"search_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateDraft(ctx context.Context, arg CreateDraftParams) error {
	_, err := q.db.ExecContext(ctx, createDraft,
		arg.ID,
		arg.ImageUrl,
		arg.Description,
		arg.Source,
		arg.Price,
		arg.Promotion,
		arg.Link,
		arg.SearchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteDraft = `-- name: DeleteDraft :exec
DELETE FROM drafts
WHERE drafts.id = $1
`

func (q *Queries) DeleteDraft(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDraft, id)
	return err
}

const getDraft = `-- name: GetDraft :one
SELECT id, image_url, description, source, price, promotion, link, search_id, created_at, updated_at
FROM drafts
WHERE drafts.id = $1
`

func (q *Queries) GetDraft(ctx context.Context, id uuid.UUID) (Draft, error) {
	row := q.db.QueryRowContext(ctx, getDraft, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Description,
		&i.Source,
		&i.Price,
		&i.Promotion,
		&i.Link,
		&i.SearchID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDraftByDescription = `-- name: GetDraftByDescription :many
SELECT id, image_url, description, source, price, promotion, link, search_id, created_at, updated_at
FROM drafts
WHERE drafts.description LIKE '%' || $1 || '%'
`

func (q *Queries) GetDraftByDescription(ctx context.Context, dollar_1 sql.NullString) ([]Draft, error) {
	rows, err := q.db.QueryContext(ctx, getDraftByDescription, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Draft
	for rows.Next() {
		var i Draft
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Description,
			&i.Source,
			&i.Price,
			&i.Promotion,
			&i.Link,
			&i.SearchID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDrafts = `-- name: GetDrafts :many
SELECT id, image_url, description, source, price, promotion, link, search_id, created_at, updated_at
FROM drafts ORDER BY created_at DESC
`

func (q *Queries) GetDrafts(ctx context.Context) ([]Draft, error) {
	rows, err := q.db.QueryContext(ctx, getDrafts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Draft
	for rows.Next() {
		var i Draft
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Description,
			&i.Source,
			&i.Price,
			&i.Promotion,
			&i.Link,
			&i.SearchID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDraft = `-- name: UpdateDraft :exec
UPDATE drafts SET description = $2, 
  image_url = $3,
  source = $4,
  price  = $5,
  promotion = $6,
  link = $7,
  updated_at = $8
WHERE drafts.id = $1
`

type UpdateDraftParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
	ImageUrl    string    `json:"image_url"`
	Source      string    `json:"source"`
	Price       float64   `json:"price"`
	Promotion   bool      `json:"promotion"`
	Link        string    `json:"link"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateDraft(ctx context.Context, arg UpdateDraftParams) error {
	_, err := q.db.ExecContext(ctx, updateDraft,
		arg.ID,
		arg.Description,
		arg.ImageUrl,
		arg.Source,
		arg.Price,
		arg.Promotion,
		arg.Link,
		arg.UpdatedAt,
	)
	return err
}
