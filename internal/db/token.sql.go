// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: token.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens ( ID, access_token, expires_in, token_type, scope, refresh_token, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateTokenParams struct {
	ID           uuid.UUID `json:"id"`
	AccessToken  string    `json:"access_token"`
	ExpiresIn    int32     `json:"expires_in"`
	TokenType    string    `json:"token_type"`
	Scope        string    `json:"scope"`
	RefreshToken string    `json:"refresh_token"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.ID,
		arg.AccessToken,
		arg.ExpiresIn,
		arg.TokenType,
		arg.Scope,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens SET access_token = $2, expires_in = $3, token_type = $4, scope = $5, refresh_token = $6, updated_at = $7 WHERE tokens.id = $1
`

type UpdateTokenParams struct {
	ID           uuid.UUID `json:"id"`
	AccessToken  string    `json:"access_token"`
	ExpiresIn    int32     `json:"expires_in"`
	TokenType    string    `json:"token_type"`
	Scope        string    `json:"scope"`
	RefreshToken string    `json:"refresh_token"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.ID,
		arg.AccessToken,
		arg.ExpiresIn,
		arg.TokenType,
		arg.Scope,
		arg.RefreshToken,
		arg.UpdatedAt,
	)
	return err
}
