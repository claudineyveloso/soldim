// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (ID, idProdutoPai, nome, codigo, preco, tipo, situacao, formato, descricao_curta, imagem_url, dataValidade, unidade, pesoLiquido, pesoBruto, volumes, itensPorCaixa, gtin, gtinEmbalagem, tipoProducao, condicao, freteGratis, marca, descricaoComplementar, linkExterno, observacoes, descricaoEmbalagemDiscreta, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28)
`

type CreateProductParams struct {
	ID                         int64     `json:"id"`
	Idprodutopai               int64     `json:"idprodutopai"`
	Nome                       string    `json:"nome"`
	Codigo                     string    `json:"codigo"`
	Preco                      float64   `json:"preco"`
	Tipo                       string    `json:"tipo"`
	Situacao                   string    `json:"situacao"`
	Formato                    string    `json:"formato"`
	DescricaoCurta             string    `json:"descricao_curta"`
	ImagemUrl                  string    `json:"imagem_url"`
	Datavalidade               time.Time `json:"datavalidade"`
	Unidade                    string    `json:"unidade"`
	Pesoliquido                float64   `json:"pesoliquido"`
	Pesobruto                  float64   `json:"pesobruto"`
	Volumes                    int32     `json:"volumes"`
	Itensporcaixa              int32     `json:"itensporcaixa"`
	Gtin                       string    `json:"gtin"`
	Gtinembalagem              string    `json:"gtinembalagem"`
	Tipoproducao               string    `json:"tipoproducao"`
	Condicao                   int32     `json:"condicao"`
	Fretegratis                bool      `json:"fretegratis"`
	Marca                      string    `json:"marca"`
	Descricaocomplementar      string    `json:"descricaocomplementar"`
	Linkexterno                string    `json:"linkexterno"`
	Observacoes                string    `json:"observacoes"`
	Descricaoembalagemdiscreta string    `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Idprodutopai,
		arg.Nome,
		arg.Codigo,
		arg.Preco,
		arg.Tipo,
		arg.Situacao,
		arg.Formato,
		arg.DescricaoCurta,
		arg.ImagemUrl,
		arg.Datavalidade,
		arg.Unidade,
		arg.Pesoliquido,
		arg.Pesobruto,
		arg.Volumes,
		arg.Itensporcaixa,
		arg.Gtin,
		arg.Gtinembalagem,
		arg.Tipoproducao,
		arg.Condicao,
		arg.Fretegratis,
		arg.Marca,
		arg.Descricaocomplementar,
		arg.Linkexterno,
		arg.Observacoes,
		arg.Descricaoembalagemdiscreta,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE products.id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
WITH aggregated_stocks AS (
    SELECT product_id,
           SUM(saldo_fisico_total) AS saldo_fisico_total,
           SUM(saldo_virtual_total) AS saldo_virtual_total
    FROM stocks
    GROUP BY product_id
),
aggregated_deposit_products AS (
    SELECT product_id,
           SUM(saldo_fisico) AS saldo_fisico,
           SUM(saldo_virtual) AS saldo_virtual
    FROM deposit_products
    GROUP BY product_id
),
aggregated_supplier_products AS (
    SELECT product_id,
           AVG(preco_custo) AS preco_custo,
           AVG(preco_compra) AS preco_compra,
           supplier_id
    FROM supplier_products
    GROUP BY product_id, supplier_id
)
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id
FROM
    products p
LEFT JOIN
    aggregated_stocks s
    ON p.id = s.product_id
LEFT JOIN
    aggregated_deposit_products dp
    ON p.id = dp.product_id
LEFT JOIN
    aggregated_supplier_products sp
    ON p.id = sp.product_id
WHERE p.id = $1
`

type GetProductRow struct {
	ID                         int64         `json:"id"`
	Idprodutopai               int64         `json:"idprodutopai"`
	Nome                       string        `json:"nome"`
	Codigo                     string        `json:"codigo"`
	Preco                      float64       `json:"preco"`
	Tipo                       string        `json:"tipo"`
	Situacao                   string        `json:"situacao"`
	Formato                    string        `json:"formato"`
	DescricaoCurta             string        `json:"descricao_curta"`
	ImagemUrl                  string        `json:"imagem_url"`
	Datavalidade               time.Time     `json:"datavalidade"`
	Unidade                    string        `json:"unidade"`
	Pesoliquido                float64       `json:"pesoliquido"`
	Pesobruto                  float64       `json:"pesobruto"`
	Volumes                    int32         `json:"volumes"`
	Itensporcaixa              int32         `json:"itensporcaixa"`
	Gtin                       string        `json:"gtin"`
	Gtinembalagem              string        `json:"gtinembalagem"`
	Tipoproducao               string        `json:"tipoproducao"`
	Condicao                   int32         `json:"condicao"`
	Fretegratis                bool          `json:"fretegratis"`
	Marca                      string        `json:"marca"`
	Descricaocomplementar      string        `json:"descricaocomplementar"`
	Linkexterno                string        `json:"linkexterno"`
	Observacoes                string        `json:"observacoes"`
	Descricaoembalagemdiscreta string        `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	SaldoFisicoTotal           int64         `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64         `json:"saldo_virtual_total"`
	SaldoFisico                int64         `json:"saldo_fisico"`
	SaldoVirtual               int64         `json:"saldo_virtual"`
	PrecoCusto                 float64       `json:"preco_custo"`
	PrecoCompra                float64       `json:"preco_compra"`
	SupplierID                 sql.NullInt64 `json:"supplier_id"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.Idprodutopai,
		&i.Nome,
		&i.Codigo,
		&i.Preco,
		&i.Tipo,
		&i.Situacao,
		&i.Formato,
		&i.DescricaoCurta,
		&i.ImagemUrl,
		&i.Datavalidade,
		&i.Unidade,
		&i.Pesoliquido,
		&i.Pesobruto,
		&i.Volumes,
		&i.Itensporcaixa,
		&i.Gtin,
		&i.Gtinembalagem,
		&i.Tipoproducao,
		&i.Condicao,
		&i.Fretegratis,
		&i.Marca,
		&i.Descricaocomplementar,
		&i.Linkexterno,
		&i.Observacoes,
		&i.Descricaoembalagemdiscreta,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SaldoFisicoTotal,
		&i.SaldoVirtualTotal,
		&i.SaldoFisico,
		&i.SaldoVirtual,
		&i.PrecoCusto,
		&i.PrecoCompra,
		&i.SupplierID,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
WITH aggregated_stocks AS (
    SELECT product_id,
           SUM(saldo_fisico_total) AS saldo_fisico_total,
           SUM(saldo_virtual_total) AS saldo_virtual_total
    FROM stocks
    GROUP BY product_id
),
aggregated_deposit_products AS (
    SELECT product_id,
           SUM(saldo_fisico) AS saldo_fisico,
           SUM(saldo_virtual) AS saldo_virtual
    FROM deposit_products
    GROUP BY product_id
),
aggregated_supplier_products AS (
    SELECT product_id,
           AVG(preco_custo) AS preco_custo,
           AVG(preco_compra) AS preco_compra,
           supplier_id
    FROM supplier_products
    GROUP BY product_id, supplier_id
)
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id
FROM
    products p
LEFT JOIN
    aggregated_stocks s
    ON p.id = s.product_id
LEFT JOIN
    aggregated_deposit_products dp
    ON p.id = dp.product_id
LEFT JOIN
    aggregated_supplier_products sp
    ON p.id = sp.product_id
WHERE p.nome = $1
`

type GetProductByNameRow struct {
	ID                         int64         `json:"id"`
	Idprodutopai               int64         `json:"idprodutopai"`
	Nome                       string        `json:"nome"`
	Codigo                     string        `json:"codigo"`
	Preco                      float64       `json:"preco"`
	Tipo                       string        `json:"tipo"`
	Situacao                   string        `json:"situacao"`
	Formato                    string        `json:"formato"`
	DescricaoCurta             string        `json:"descricao_curta"`
	ImagemUrl                  string        `json:"imagem_url"`
	Datavalidade               time.Time     `json:"datavalidade"`
	Unidade                    string        `json:"unidade"`
	Pesoliquido                float64       `json:"pesoliquido"`
	Pesobruto                  float64       `json:"pesobruto"`
	Volumes                    int32         `json:"volumes"`
	Itensporcaixa              int32         `json:"itensporcaixa"`
	Gtin                       string        `json:"gtin"`
	Gtinembalagem              string        `json:"gtinembalagem"`
	Tipoproducao               string        `json:"tipoproducao"`
	Condicao                   int32         `json:"condicao"`
	Fretegratis                bool          `json:"fretegratis"`
	Marca                      string        `json:"marca"`
	Descricaocomplementar      string        `json:"descricaocomplementar"`
	Linkexterno                string        `json:"linkexterno"`
	Observacoes                string        `json:"observacoes"`
	Descricaoembalagemdiscreta string        `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	SaldoFisicoTotal           int64         `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64         `json:"saldo_virtual_total"`
	SaldoFisico                int64         `json:"saldo_fisico"`
	SaldoVirtual               int64         `json:"saldo_virtual"`
	PrecoCusto                 float64       `json:"preco_custo"`
	PrecoCompra                float64       `json:"preco_compra"`
	SupplierID                 sql.NullInt64 `json:"supplier_id"`
}

func (q *Queries) GetProductByName(ctx context.Context, nome string) (GetProductByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByName, nome)
	var i GetProductByNameRow
	err := row.Scan(
		&i.ID,
		&i.Idprodutopai,
		&i.Nome,
		&i.Codigo,
		&i.Preco,
		&i.Tipo,
		&i.Situacao,
		&i.Formato,
		&i.DescricaoCurta,
		&i.ImagemUrl,
		&i.Datavalidade,
		&i.Unidade,
		&i.Pesoliquido,
		&i.Pesobruto,
		&i.Volumes,
		&i.Itensporcaixa,
		&i.Gtin,
		&i.Gtinembalagem,
		&i.Tipoproducao,
		&i.Condicao,
		&i.Fretegratis,
		&i.Marca,
		&i.Descricaocomplementar,
		&i.Linkexterno,
		&i.Observacoes,
		&i.Descricaoembalagemdiscreta,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SaldoFisicoTotal,
		&i.SaldoVirtualTotal,
		&i.SaldoFisico,
		&i.SaldoVirtual,
		&i.PrecoCusto,
		&i.PrecoCompra,
		&i.SupplierID,
	)
	return i, err
}

const getProductBySupplierID = `-- name: GetProductBySupplierID :one
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id
FROM
    products p
LEFT JOIN
    (SELECT product_id, SUM(saldo_fisico_total) as saldo_fisico_total, SUM(saldo_virtual_total) as saldo_virtual_total FROM stocks GROUP BY product_id) s
    ON p.id = s.product_id
LEFT JOIN
    (SELECT product_id, SUM(saldo_fisico) as saldo_fisico, SUM(saldo_virtual) as saldo_virtual FROM deposit_products GROUP BY product_id) dp
    ON p.id = dp.product_id
LEFT JOIN
    (SELECT product_id, AVG(preco_custo) as preco_custo, AVG(preco_compra) as preco_compra, supplier_id
     FROM supplier_products
     WHERE supplier_id = $1
     GROUP BY product_id, supplier_id) sp
    ON p.id = sp.product_id
WHERE sp.supplier_id IS NOT NULL
`

type GetProductBySupplierIDRow struct {
	ID                         int64     `json:"id"`
	Idprodutopai               int64     `json:"idprodutopai"`
	Nome                       string    `json:"nome"`
	Codigo                     string    `json:"codigo"`
	Preco                      float64   `json:"preco"`
	Tipo                       string    `json:"tipo"`
	Situacao                   string    `json:"situacao"`
	Formato                    string    `json:"formato"`
	DescricaoCurta             string    `json:"descricao_curta"`
	ImagemUrl                  string    `json:"imagem_url"`
	Datavalidade               time.Time `json:"datavalidade"`
	Unidade                    string    `json:"unidade"`
	Pesoliquido                float64   `json:"pesoliquido"`
	Pesobruto                  float64   `json:"pesobruto"`
	Volumes                    int32     `json:"volumes"`
	Itensporcaixa              int32     `json:"itensporcaixa"`
	Gtin                       string    `json:"gtin"`
	Gtinembalagem              string    `json:"gtinembalagem"`
	Tipoproducao               string    `json:"tipoproducao"`
	Condicao                   int32     `json:"condicao"`
	Fretegratis                bool      `json:"fretegratis"`
	Marca                      string    `json:"marca"`
	Descricaocomplementar      string    `json:"descricaocomplementar"`
	Linkexterno                string    `json:"linkexterno"`
	Observacoes                string    `json:"observacoes"`
	Descricaoembalagemdiscreta string    `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	SaldoFisicoTotal           int64     `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64     `json:"saldo_virtual_total"`
	SaldoFisico                int64     `json:"saldo_fisico"`
	SaldoVirtual               int64     `json:"saldo_virtual"`
	PrecoCusto                 float64   `json:"preco_custo"`
	PrecoCompra                float64   `json:"preco_compra"`
	SupplierID                 int64     `json:"supplier_id"`
}

func (q *Queries) GetProductBySupplierID(ctx context.Context, supplierID int64) (GetProductBySupplierIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProductBySupplierID, supplierID)
	var i GetProductBySupplierIDRow
	err := row.Scan(
		&i.ID,
		&i.Idprodutopai,
		&i.Nome,
		&i.Codigo,
		&i.Preco,
		&i.Tipo,
		&i.Situacao,
		&i.Formato,
		&i.DescricaoCurta,
		&i.ImagemUrl,
		&i.Datavalidade,
		&i.Unidade,
		&i.Pesoliquido,
		&i.Pesobruto,
		&i.Volumes,
		&i.Itensporcaixa,
		&i.Gtin,
		&i.Gtinembalagem,
		&i.Tipoproducao,
		&i.Condicao,
		&i.Fretegratis,
		&i.Marca,
		&i.Descricaocomplementar,
		&i.Linkexterno,
		&i.Observacoes,
		&i.Descricaoembalagemdiscreta,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SaldoFisicoTotal,
		&i.SaldoVirtualTotal,
		&i.SaldoFisico,
		&i.SaldoVirtual,
		&i.PrecoCusto,
		&i.PrecoCompra,
		&i.SupplierID,
	)
	return i, err
}

const getProductEmptyStock = `-- name: GetProductEmptyStock :many
WITH aggregated_stocks AS (
    SELECT product_id,
           SUM(saldo_fisico_total) AS saldo_fisico_total,
           SUM(saldo_virtual_total) AS saldo_virtual_total
    FROM stocks
    GROUP BY product_id
),
aggregated_deposit_products AS (
    SELECT product_id,
           SUM(saldo_fisico) AS saldo_fisico,
           SUM(saldo_virtual) AS saldo_virtual
    FROM deposit_products
    GROUP BY product_id
),
aggregated_supplier_products AS (
    SELECT product_id,
           AVG(preco_custo) AS preco_custo,
           AVG(preco_compra) AS preco_compra,
           supplier_id
    FROM supplier_products
    GROUP BY product_id, supplier_id
)
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id
FROM
    products p
LEFT JOIN
    aggregated_stocks s
    ON p.id = s.product_id
LEFT JOIN
    aggregated_deposit_products dp
    ON p.id = dp.product_id
LEFT JOIN
    aggregated_supplier_products sp
    ON p.id = sp.product_id
WHERE
    ($1::text IS NULL OR $1 = '' OR p.nome ILIKE '%' || $1 || '%')
    AND ($2::text IS NULL OR $2 = '' OR p.situacao = $2::text)
    AND s.saldo_fisico_total = 0
    AND s.saldo_virtual_total = 0
    AND dp.saldo_fisico = 0
    AND dp.saldo_virtual = 0
ORDER BY
    p.nome
`

type GetProductEmptyStockParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
}

type GetProductEmptyStockRow struct {
	ID                         int64         `json:"id"`
	Idprodutopai               int64         `json:"idprodutopai"`
	Nome                       string        `json:"nome"`
	Codigo                     string        `json:"codigo"`
	Preco                      float64       `json:"preco"`
	Tipo                       string        `json:"tipo"`
	Situacao                   string        `json:"situacao"`
	Formato                    string        `json:"formato"`
	DescricaoCurta             string        `json:"descricao_curta"`
	ImagemUrl                  string        `json:"imagem_url"`
	Datavalidade               time.Time     `json:"datavalidade"`
	Unidade                    string        `json:"unidade"`
	Pesoliquido                float64       `json:"pesoliquido"`
	Pesobruto                  float64       `json:"pesobruto"`
	Volumes                    int32         `json:"volumes"`
	Itensporcaixa              int32         `json:"itensporcaixa"`
	Gtin                       string        `json:"gtin"`
	Gtinembalagem              string        `json:"gtinembalagem"`
	Tipoproducao               string        `json:"tipoproducao"`
	Condicao                   int32         `json:"condicao"`
	Fretegratis                bool          `json:"fretegratis"`
	Marca                      string        `json:"marca"`
	Descricaocomplementar      string        `json:"descricaocomplementar"`
	Linkexterno                string        `json:"linkexterno"`
	Observacoes                string        `json:"observacoes"`
	Descricaoembalagemdiscreta string        `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	SaldoFisicoTotal           int64         `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64         `json:"saldo_virtual_total"`
	SaldoFisico                int64         `json:"saldo_fisico"`
	SaldoVirtual               int64         `json:"saldo_virtual"`
	PrecoCusto                 float64       `json:"preco_custo"`
	PrecoCompra                float64       `json:"preco_compra"`
	SupplierID                 sql.NullInt64 `json:"supplier_id"`
}

func (q *Queries) GetProductEmptyStock(ctx context.Context, arg GetProductEmptyStockParams) ([]GetProductEmptyStockRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductEmptyStock, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductEmptyStockRow
	for rows.Next() {
		var i GetProductEmptyStockRow
		if err := rows.Scan(
			&i.ID,
			&i.Idprodutopai,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
			&i.Tipo,
			&i.Situacao,
			&i.Formato,
			&i.DescricaoCurta,
			&i.ImagemUrl,
			&i.Datavalidade,
			&i.Unidade,
			&i.Pesoliquido,
			&i.Pesobruto,
			&i.Volumes,
			&i.Itensporcaixa,
			&i.Gtin,
			&i.Gtinembalagem,
			&i.Tipoproducao,
			&i.Condicao,
			&i.Fretegratis,
			&i.Marca,
			&i.Descricaocomplementar,
			&i.Linkexterno,
			&i.Observacoes,
			&i.Descricaoembalagemdiscreta,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SaldoFisicoTotal,
			&i.SaldoVirtualTotal,
			&i.SaldoFisico,
			&i.SaldoVirtual,
			&i.PrecoCusto,
			&i.PrecoCompra,
			&i.SupplierID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductNoMovements = `-- name: GetProductNoMovements :many
WITH aggregated_stocks AS (
    SELECT product_id,
           SUM(saldo_fisico_total) AS saldo_fisico_total,
           SUM(saldo_virtual_total) AS saldo_virtual_total
    FROM stocks
    GROUP BY product_id
),
aggregated_deposit_products AS (
    SELECT product_id,
           SUM(saldo_fisico) AS saldo_fisico,
           SUM(saldo_virtual) AS saldo_virtual
    FROM deposit_products
    GROUP BY product_id
),
aggregated_supplier_products AS (
    SELECT product_id,
           AVG(preco_custo) AS preco_custo,
           AVG(preco_compra) AS preco_compra,
           supplier_id,
           MAX(descricao) AS descricao,
           MAX(codigo) AS codigo
    FROM supplier_products
    GROUP BY product_id, supplier_id
),
aggregated_sales_orders AS (
    SELECT pso.product_id,
           so.numero,
           so.numeroloja,
           so.data,
           so.datasaida,
           so.dataprevista,
           COALESCE(so.totalprodutos, 0) AS totalprodutos,
           COALESCE(so.totaldescontos, 0) AS totaldescontos
    FROM products_sales_orders pso
    JOIN sales_orders so ON pso.sales_order_id = so.id
    WHERE so.datasaida < NOW() - INTERVAL '1 week'
)
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id,
    so.numero,
    so.numeroloja,
    so.data,
    so.datasaida,
    so.dataprevista,
    COALESCE(so.totalprodutos, 0) AS totalprodutos,
    COALESCE(so.totaldescontos, 0) AS totaldescontos
FROM
    products p
LEFT JOIN
    aggregated_stocks s ON p.id = s.product_id
LEFT JOIN
    aggregated_deposit_products dp ON p.id = dp.product_id
LEFT JOIN
    aggregated_supplier_products sp ON p.id = sp.product_id
LEFT JOIN
    aggregated_sales_orders so ON p.id = so.product_id
WHERE
    ($1::text IS NULL OR $1 = '' OR p.nome ILIKE '%' || $1 || '%')
    AND ($2::text IS NULL OR $2 = '' OR p.situacao = $2::text)
`

type GetProductNoMovementsParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
}

type GetProductNoMovementsRow struct {
	ID                         int64          `json:"id"`
	Idprodutopai               int64          `json:"idprodutopai"`
	Nome                       string         `json:"nome"`
	Codigo                     string         `json:"codigo"`
	Preco                      float64        `json:"preco"`
	Tipo                       string         `json:"tipo"`
	Situacao                   string         `json:"situacao"`
	Formato                    string         `json:"formato"`
	DescricaoCurta             string         `json:"descricao_curta"`
	ImagemUrl                  string         `json:"imagem_url"`
	Datavalidade               time.Time      `json:"datavalidade"`
	Unidade                    string         `json:"unidade"`
	Pesoliquido                float64        `json:"pesoliquido"`
	Pesobruto                  float64        `json:"pesobruto"`
	Volumes                    int32          `json:"volumes"`
	Itensporcaixa              int32          `json:"itensporcaixa"`
	Gtin                       string         `json:"gtin"`
	Gtinembalagem              string         `json:"gtinembalagem"`
	Tipoproducao               string         `json:"tipoproducao"`
	Condicao                   int32          `json:"condicao"`
	Fretegratis                bool           `json:"fretegratis"`
	Marca                      string         `json:"marca"`
	Descricaocomplementar      string         `json:"descricaocomplementar"`
	Linkexterno                string         `json:"linkexterno"`
	Observacoes                string         `json:"observacoes"`
	Descricaoembalagemdiscreta string         `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time      `json:"created_at"`
	UpdatedAt                  time.Time      `json:"updated_at"`
	SaldoFisicoTotal           int64          `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64          `json:"saldo_virtual_total"`
	SaldoFisico                int64          `json:"saldo_fisico"`
	SaldoVirtual               int64          `json:"saldo_virtual"`
	PrecoCusto                 float64        `json:"preco_custo"`
	PrecoCompra                float64        `json:"preco_compra"`
	SupplierID                 sql.NullInt64  `json:"supplier_id"`
	Numero                     sql.NullInt32  `json:"numero"`
	Numeroloja                 sql.NullString `json:"numeroloja"`
	Data                       sql.NullTime   `json:"data"`
	Datasaida                  sql.NullTime   `json:"datasaida"`
	Dataprevista               sql.NullTime   `json:"dataprevista"`
	Totalprodutos              float64        `json:"totalprodutos"`
	Totaldescontos             float64        `json:"totaldescontos"`
}

func (q *Queries) GetProductNoMovements(ctx context.Context, arg GetProductNoMovementsParams) ([]GetProductNoMovementsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductNoMovements, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductNoMovementsRow
	for rows.Next() {
		var i GetProductNoMovementsRow
		if err := rows.Scan(
			&i.ID,
			&i.Idprodutopai,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
			&i.Tipo,
			&i.Situacao,
			&i.Formato,
			&i.DescricaoCurta,
			&i.ImagemUrl,
			&i.Datavalidade,
			&i.Unidade,
			&i.Pesoliquido,
			&i.Pesobruto,
			&i.Volumes,
			&i.Itensporcaixa,
			&i.Gtin,
			&i.Gtinembalagem,
			&i.Tipoproducao,
			&i.Condicao,
			&i.Fretegratis,
			&i.Marca,
			&i.Descricaocomplementar,
			&i.Linkexterno,
			&i.Observacoes,
			&i.Descricaoembalagemdiscreta,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SaldoFisicoTotal,
			&i.SaldoVirtualTotal,
			&i.SaldoFisico,
			&i.SaldoVirtual,
			&i.PrecoCusto,
			&i.PrecoCompra,
			&i.SupplierID,
			&i.Numero,
			&i.Numeroloja,
			&i.Data,
			&i.Datasaida,
			&i.Dataprevista,
			&i.Totalprodutos,
			&i.Totaldescontos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
WITH aggregated_stocks AS (
    SELECT product_id,
           SUM(saldo_fisico_total) AS saldo_fisico_total,
           SUM(saldo_virtual_total) AS saldo_virtual_total
    FROM stocks
    GROUP BY product_id
),
aggregated_deposit_products AS (
    SELECT product_id,
           SUM(saldo_fisico) AS saldo_fisico,
           SUM(saldo_virtual) AS saldo_virtual
    FROM deposit_products
    GROUP BY product_id
),
aggregated_supplier_products AS (
    SELECT product_id,
           AVG(preco_custo) AS preco_custo,
           AVG(preco_compra) AS preco_compra,
           supplier_id
    FROM supplier_products
    GROUP BY product_id, supplier_id
)
SELECT
    p.ID,
    p.idProdutoPai,
    p.nome,
    p.codigo,
    p.preco,
    p.tipo,
    p.situacao,
    p.formato,
    p.descricao_curta,
    p.imagem_url,
    p.dataValidade,
    p.unidade,
    p.pesoLiquido,
    p.pesoBruto,
    p.volumes,
    p.itensPorCaixa,
    p.gtin,
    p.gtinEmbalagem,
    p.tipoProducao,
    p.condicao,
    p.freteGratis,
    p.marca,
    p.descricaoComplementar,
    p.linkExterno,
    p.observacoes,
    p.descricaoEmbalagemDiscreta,
    p.created_at,
    p.updated_at,
    COALESCE(s.saldo_fisico_total, 0) AS saldo_fisico_total,
    COALESCE(s.saldo_virtual_total, 0) AS saldo_virtual_total,
    COALESCE(dp.saldo_fisico, 0) AS saldo_fisico,
    COALESCE(dp.saldo_virtual, 0) AS saldo_virtual,
    COALESCE(sp.preco_custo, 0) AS preco_custo,
    COALESCE(sp.preco_compra, 0) AS preco_compra,
    sp.supplier_id
FROM
    products p
LEFT JOIN
    aggregated_stocks s
    ON p.id = s.product_id
LEFT JOIN
    aggregated_deposit_products dp
    ON p.id = dp.product_id
LEFT JOIN
    aggregated_supplier_products sp
    ON p.id = sp.product_id
WHERE
    ($1::text IS NULL OR $1 = '' OR p.nome ILIKE '%' || $1 || '%')
    AND ($2::text IS NULL OR $2 = '' OR p.situacao = $2::text)
    AND ($3::text IS NULL OR $3 = '' OR sp.supplier_id = $3::int)
    ORDER BY p.nome
`

type GetProductsParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
	Column3 string `json:"column_3"`
}

type GetProductsRow struct {
	ID                         int64         `json:"id"`
	Idprodutopai               int64         `json:"idprodutopai"`
	Nome                       string        `json:"nome"`
	Codigo                     string        `json:"codigo"`
	Preco                      float64       `json:"preco"`
	Tipo                       string        `json:"tipo"`
	Situacao                   string        `json:"situacao"`
	Formato                    string        `json:"formato"`
	DescricaoCurta             string        `json:"descricao_curta"`
	ImagemUrl                  string        `json:"imagem_url"`
	Datavalidade               time.Time     `json:"datavalidade"`
	Unidade                    string        `json:"unidade"`
	Pesoliquido                float64       `json:"pesoliquido"`
	Pesobruto                  float64       `json:"pesobruto"`
	Volumes                    int32         `json:"volumes"`
	Itensporcaixa              int32         `json:"itensporcaixa"`
	Gtin                       string        `json:"gtin"`
	Gtinembalagem              string        `json:"gtinembalagem"`
	Tipoproducao               string        `json:"tipoproducao"`
	Condicao                   int32         `json:"condicao"`
	Fretegratis                bool          `json:"fretegratis"`
	Marca                      string        `json:"marca"`
	Descricaocomplementar      string        `json:"descricaocomplementar"`
	Linkexterno                string        `json:"linkexterno"`
	Observacoes                string        `json:"observacoes"`
	Descricaoembalagemdiscreta string        `json:"descricaoembalagemdiscreta"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	SaldoFisicoTotal           int64         `json:"saldo_fisico_total"`
	SaldoVirtualTotal          int64         `json:"saldo_virtual_total"`
	SaldoFisico                int64         `json:"saldo_fisico"`
	SaldoVirtual               int64         `json:"saldo_virtual"`
	PrecoCusto                 float64       `json:"preco_custo"`
	PrecoCompra                float64       `json:"preco_compra"`
	SupplierID                 sql.NullInt64 `json:"supplier_id"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Idprodutopai,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
			&i.Tipo,
			&i.Situacao,
			&i.Formato,
			&i.DescricaoCurta,
			&i.ImagemUrl,
			&i.Datavalidade,
			&i.Unidade,
			&i.Pesoliquido,
			&i.Pesobruto,
			&i.Volumes,
			&i.Itensporcaixa,
			&i.Gtin,
			&i.Gtinembalagem,
			&i.Tipoproducao,
			&i.Condicao,
			&i.Fretegratis,
			&i.Marca,
			&i.Descricaocomplementar,
			&i.Linkexterno,
			&i.Observacoes,
			&i.Descricaoembalagemdiscreta,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SaldoFisicoTotal,
			&i.SaldoVirtualTotal,
			&i.SaldoFisico,
			&i.SaldoVirtual,
			&i.PrecoCusto,
			&i.PrecoCompra,
			&i.SupplierID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET idProdutoPai = $2,
  nome = $3,
  codigo = $4,
  preco = $5,
  tipo  = $6,
  situacao = $7,
  formato = $8,
  descricao_curta = $9,
  imagem_url = $10,
  dataValidade = $11,
  unidade = $12,
  pesoLiquido = $13,
  pesoBruto = $14,
  volumes = $15,
  itensPorCaixa = $16,
  gtin = $17,
  gtinEmbalagem = $18,
  tipoProducao = $19,
  condicao = $20,
  freteGratis = $21,
  marca = $22,
  descricaoComplementar = $23,
  linkExterno = $24,
  observacoes = $25,
  descricaoEmbalagemDiscreta = $26,
  updated_at = $27
WHERE products.id = $1
`

type UpdateProductParams struct {
	ID                         int64     `json:"id"`
	Idprodutopai               int64     `json:"idprodutopai"`
	Nome                       string    `json:"nome"`
	Codigo                     string    `json:"codigo"`
	Preco                      float64   `json:"preco"`
	Tipo                       string    `json:"tipo"`
	Situacao                   string    `json:"situacao"`
	Formato                    string    `json:"formato"`
	DescricaoCurta             string    `json:"descricao_curta"`
	ImagemUrl                  string    `json:"imagem_url"`
	Datavalidade               time.Time `json:"datavalidade"`
	Unidade                    string    `json:"unidade"`
	Pesoliquido                float64   `json:"pesoliquido"`
	Pesobruto                  float64   `json:"pesobruto"`
	Volumes                    int32     `json:"volumes"`
	Itensporcaixa              int32     `json:"itensporcaixa"`
	Gtin                       string    `json:"gtin"`
	Gtinembalagem              string    `json:"gtinembalagem"`
	Tipoproducao               string    `json:"tipoproducao"`
	Condicao                   int32     `json:"condicao"`
	Fretegratis                bool      `json:"fretegratis"`
	Marca                      string    `json:"marca"`
	Descricaocomplementar      string    `json:"descricaocomplementar"`
	Linkexterno                string    `json:"linkexterno"`
	Observacoes                string    `json:"observacoes"`
	Descricaoembalagemdiscreta string    `json:"descricaoembalagemdiscreta"`
	UpdatedAt                  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Idprodutopai,
		arg.Nome,
		arg.Codigo,
		arg.Preco,
		arg.Tipo,
		arg.Situacao,
		arg.Formato,
		arg.DescricaoCurta,
		arg.ImagemUrl,
		arg.Datavalidade,
		arg.Unidade,
		arg.Pesoliquido,
		arg.Pesobruto,
		arg.Volumes,
		arg.Itensporcaixa,
		arg.Gtin,
		arg.Gtinembalagem,
		arg.Tipoproducao,
		arg.Condicao,
		arg.Fretegratis,
		arg.Marca,
		arg.Descricaocomplementar,
		arg.Linkexterno,
		arg.Observacoes,
		arg.Descricaoembalagemdiscreta,
		arg.UpdatedAt,
	)
	return err
}
