// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products ( ID, nome, codigo, preco, tipo, situacao, formato, descricaoCurta, imagemURL, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateProductParams struct {
	ID             int32     `json:"id"`
	Nome           string    `json:"nome"`
	Codigo         string    `json:"codigo"`
	Preco          float64   `json:"preco"`
	Tipo           string    `json:"tipo"`
	Situacao       string    `json:"situacao"`
	Formato        string    `json:"formato"`
	Descricaocurta string    `json:"descricaocurta"`
	Imagemurl      string    `json:"imagemurl"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Nome,
		arg.Codigo,
		arg.Preco,
		arg.Tipo,
		arg.Situacao,
		arg.Formato,
		arg.Descricaocurta,
		arg.Imagemurl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, nome, codigo, preco, tipo, situacao, formato, descricaocurta, imagemurl, created_at, updated_at
FROM products
WHERE products.id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Codigo,
		&i.Preco,
		&i.Tipo,
		&i.Situacao,
		&i.Formato,
		&i.Descricaocurta,
		&i.Imagemurl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, nome, codigo, preco, tipo, situacao, formato, descricaocurta, imagemurl, created_at, updated_at
FROM products
WHERE products.nome = $1
`

func (q *Queries) GetProductByName(ctx context.Context, nome string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByName, nome)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Codigo,
		&i.Preco,
		&i.Tipo,
		&i.Situacao,
		&i.Formato,
		&i.Descricaocurta,
		&i.Imagemurl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, nome, codigo, preco, tipo, situacao, formato, descricaocurta, imagemurl, created_at, updated_at
FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Codigo,
			&i.Preco,
			&i.Tipo,
			&i.Situacao,
			&i.Formato,
			&i.Descricaocurta,
			&i.Imagemurl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
