// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: supplier_user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSuppliersUser = `-- name: CreateSuppliersUser :exec
INSERT INTO suppliers_users (supplier_id, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateSuppliersUserParams struct {
	SupplierID int64     `json:"supplier_id"`
	UserID     uuid.UUID `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateSuppliersUser(ctx context.Context, arg CreateSuppliersUserParams) error {
	_, err := q.db.ExecContext(ctx, createSuppliersUser,
		arg.SupplierID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSuppliersUsers = `-- name: GetSuppliersUsers :many
SELECT  supplier_id,
          user_id,
          created_at,
          updated_at
FROM suppliers_users
`

func (q *Queries) GetSuppliersUsers(ctx context.Context) ([]SuppliersUser, error) {
	rows, err := q.db.QueryContext(ctx, getSuppliersUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SuppliersUser
	for rows.Next() {
		var i SuppliersUser
		if err := rows.Scan(
			&i.SupplierID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSuppliersUsers = `-- name: UpdateSuppliersUsers :exec
UPDATE suppliers_users SET supplier_id = $2,
  updated_at = $3
WHERE suppliers_users.user_id = $1
`

type UpdateSuppliersUsersParams struct {
	UserID     uuid.UUID `json:"user_id"`
	SupplierID int64     `json:"supplier_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSuppliersUsers(ctx context.Context, arg UpdateSuppliersUsersParams) error {
	_, err := q.db.ExecContext(ctx, updateSuppliersUsers, arg.UserID, arg.SupplierID, arg.UpdatedAt)
	return err
}
