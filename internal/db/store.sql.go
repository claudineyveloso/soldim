// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: store.sql

package db

import (
	"context"
	"time"
)

const createStore = `-- name: CreateStore :exec
INSERT INTO stores (id, descricao, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateStoreParams struct {
	ID        int64     `json:"id"`
	Descricao string    `json:"descricao"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) error {
	_, err := q.db.ExecContext(ctx, createStore,
		arg.ID,
		arg.Descricao,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id,
        descricao,
        created_at,
        updated_at
FROM stores
WHERE stores.id = $1
`

func (q *Queries) GetStore(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStoreByDescription = `-- name: GetStoreByDescription :one
SELECT id,
        descricao,
        created_at,
        updated_at
FROM stores
WHERE stores.descricao = $1
`

func (q *Queries) GetStoreByDescription(ctx context.Context, descricao string) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStoreByDescription, descricao)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStores = `-- name: GetStores :many
SELECT id,
        descricao,
        created_at,
        updated_at
FROM stores
`

func (q *Queries) GetStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, getStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
