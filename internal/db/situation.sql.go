// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: situation.sql

package db

import (
	"context"
	"time"
)

const createSituation = `-- name: CreateSituation :exec
INSERT INTO situations (id, descricao, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateSituationParams struct {
	ID        int64     `json:"id"`
	Descricao string    `json:"descricao"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateSituation(ctx context.Context, arg CreateSituationParams) error {
	_, err := q.db.ExecContext(ctx, createSituation,
		arg.ID,
		arg.Descricao,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSituation = `-- name: GetSituation :one
SELECT id,
        descricao,
        created_at,
        updated_at
FROM situations
WHERE situations.id = $1
`

func (q *Queries) GetSituation(ctx context.Context, id int64) (Situation, error) {
	row := q.db.QueryRowContext(ctx, getSituation, id)
	var i Situation
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSituationByDescroption = `-- name: GetSituationByDescroption :one
SELECT id,
        descricao,
        created_at,
        updated_at
FROM situations
WHERE situations.descricao = $1
`

func (q *Queries) GetSituationByDescroption(ctx context.Context, descricao string) (Situation, error) {
	row := q.db.QueryRowContext(ctx, getSituationByDescroption, descricao)
	var i Situation
	err := row.Scan(
		&i.ID,
		&i.Descricao,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSituations = `-- name: GetSituations :many
SELECT id,
        descricao,
        created_at,
        updated_at
FROM situations
`

func (q *Queries) GetSituations(ctx context.Context) ([]Situation, error) {
	rows, err := q.db.QueryContext(ctx, getSituations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Situation
	for rows.Next() {
		var i Situation
		if err := rows.Scan(
			&i.ID,
			&i.Descricao,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
